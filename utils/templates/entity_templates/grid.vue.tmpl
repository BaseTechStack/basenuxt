<template>
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
    <GridCard 
      v-for="{{.StructName | toLower}} in {{.StructName | toLower}}s" 
      :key="{{.StructName | toLower}}.id" 
      :item="{{.StructName | toLower}}"
      title="id"
      {{if ge (len .Fields) 2}}subtitle="{{(index .Fields 1).JSONName}}"{{end}}
      :fields="[
        {{range $index, $field := .Fields}}
        {{if and (gt $index 1) (lt $index 5)}}{ key: '{{$field.JSONName}}', label: '{{$field.Name | ToPascal}}' },{{end}}
        {{end}}
      ]"
      timestamp="createdAt"
      hover
    >
      <template #actions>
        <BaseCrudActions 
          structure="{{.PluralName | toLower}}"
          :item="{{.StructName | toLower}}" 
          actions="view,edit,delete"
          @view="$emit('view', $event)"
          @edit="$emit('edit', $event)"
          @delete="$emit('delete', $event)"
        />
      </template>
      
      <template #footer-actions>
        <UButton
          size="xs"
          color="primary"
          variant="ghost"
          icon="i-heroicons-eye"
          @click="$emit('view', {{.StructName | toLower}})"
        >
          View Details
        </UButton>
      </template>
    </GridCard>
  </div>
</template>

<script setup lang="ts">
import type { {{.StructName}} } from '../stores/{{.StructName | toLower}}'

defineProps<{
  {{.StructName | toLower}}s: {{.StructName}}[]
}>()

defineEmits<{
  (e: 'edit', {{.StructName | toLower}}: {{.StructName}}): void
  (e: 'delete', {{.StructName | toLower}}: {{.StructName}}): void
}>()
</script>
