//pinia store for {{.PluralName}}

// Add TypeScript declaration for import.meta.client
declare global {
  interface ImportMeta {
    client: boolean
  }
}

import type { {{.StructName}} } from './{{.StructName | toLower}}'
import { defineBaseStore, type BaseItem } from '@@/app/stores/baseStore'
import { {{.StructName | toLower}}Service } from '../services/{{.StructName | toLower}}Service'

const VIEW_MODE_KEY = '{{.PluralName | toLower}}_view_mode'

// Create the base {{.PluralName}} store with the {{.StructName | toLower}} service
export const use{{.PluralName}}Store = defineBaseStore<{{.StructName}}>('{{.PluralName | toLower}}', VIEW_MODE_KEY, {{.StructName | toLower}}Service)

// Adding specialized methods to the store
// Instead of extending, we'll use the store object directly
// and add our specialized methods that call the base methods

// Add these helper methods to provide more descriptive names
export function fetch{{.PluralName}}(page = 1, pageSize?: number): Promise<void> {
  console.log('fetch{{.PluralName}} called with page:', page, 'pageSize:', pageSize)
  const store = use{{.PluralName}}Store()
  return store.fetch(page, pageSize)
}

export function create{{.StructName}}({{.StructName | toLower}}Data: Omit<{{.StructName}}, 'id'>): Promise<{{.StructName}}> {
  const store = use{{.PluralName}}Store()
  return store.create({{.StructName | toLower}}Data)
}

export function update{{.StructName}}ById(id: number, {{.StructName | toLower}}Data: Partial<Omit<{{.StructName}}, 'id'>>): Promise<{{.StructName}}> {
  const store = use{{.PluralName}}Store()
  return store.update(id, {{.StructName | toLower}}Data)
}

export function delete{{.StructName}}(id: number): Promise<void> {
  const store = use{{.PluralName}}Store()
  return store.delete(id)
}
