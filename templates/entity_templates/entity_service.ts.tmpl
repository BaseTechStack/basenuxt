import type { {{.StructName}} } from '../stores/{{.StructName | toLower}}'
import type { BaseService } from '@@/app/services/baseService'
import { use{{.PluralName}} } from '../composables/use{{.PluralName}}'
import type { BasePagination } from '@@/app/types/base'

// Use a composable pattern to ensure Pinia is initialized before using the store
export const use{{.StructName}}Service = (): BaseService<{{.StructName}}> => {
  // Only create use{{.PluralName}}() when the composable is called, not at module level
  const {{.PluralName | toLower}}Api = use{{.PluralName}}()
  
  return {
    async fetch(page = 1, pageSize = 10): Promise<{ items: {{.StructName}}[], pagination: BasePagination }> {
      console.log('{{.StructName}}Service.fetch called with page:', page, 'pageSize:', pageSize)
      const result = await {{.PluralName | toLower}}Api.fetch{{.PluralName}}(page, pageSize)
      console.log('{{.StructName}}Service API response:', result)
      return {
        items: result.{{.PluralName | toLower}}.map(({{.StructName | toLower}}: {{.StructName}}) => ({
          ...{{.StructName | toLower}},
          id: Number({{.StructName | toLower}}.id)
        })),
        pagination: result.pagination
      }
    },

    async create(data: Omit<{{.StructName}}, 'id'>): Promise<{ item: {{.StructName}} }> {
      const result = await {{.PluralName | toLower}}Api.create{{.StructName}}(data)
      return {
        item: {
          ...result.{{.StructName | toLower}},
          id: Number(result.{{.StructName | toLower}}.id)
        }
      }
    },

    async update(id: number, data: Partial<Omit<{{.StructName}}, 'id'>>): Promise<{ item: {{.StructName}} }> {
      const result = await {{.PluralName | toLower}}Api.update{{.StructName}}(id, data)
      return {
        item: {
          ...result.{{.StructName | toLower}},
          id: Number(result.{{.StructName | toLower}}.id)
        }
      }
    },

    async delete(id: number): Promise<void> {
      await {{.PluralName | toLower}}Api.delete{{.StructName}}(id)
    }
  }
}
