<template>
  <div class="{{.StructName | toKebab}}-detail-container">
    <header class="{{.StructName | toKebab}}-detail-header p-4 flex justify-between items-center mb-6">
      <div class="flex items-center">
        <NuxtLink :to="`/{{.PluralName | toKebab}}`" class="back-link">
          <UButton
            color="neutral"
            variant="ghost"
            icon="i-lucide-arrow-left"
          >
            Back to {{.PluralName}}
          </UButton>
        </NuxtLink>
        <h1 class="text-2xl font-bold ml-4">{{ "{{" }} {{.StructName | toCamel}} ? {{.StructName | toCamel}}.{{(index .Fields 0).JSONName}} : 'Loading {{.StructName}}...' {{ "}}" }}</h1>
      </div>
      
      <div v-if="{{.StructName | toCamel}}" class="flex items-center space-x-2">
        <UButton
          color="success"
          icon="i-heroicons-pencil-square"
          @click="isEditing = true"
          v-if="!isEditing"
        >
          Edit
        </UButton>
        <UButton
          color="error"
          variant="ghost"
          icon="i-heroicons-trash"
          @click="showDeleteConfirm = true"
          v-if="!isEditing"
        >
          Delete
        </UButton>
        <UButton
          color="neutral"
          variant="ghost"
          icon="i-heroicons-x-mark-20-solid"
          @click="isEditing = false"
          v-if="isEditing"
        >
          Cancel
        </UButton>
        <UButton
          color="success"
          icon="i-heroicons-check"
          @click="saveChanges"
          v-if="isEditing"
          :loading="saving"
        >
          Save
        </UButton>
      </div>
    </header>

    <div v-if="loading" class="flex flex-col items-center justify-center p-12">
      <ULoading />
      <p class="mt-4 text-gray-500">Loading {{.StructName}}...</p>
    </div>

    <div v-else-if="error" class="p-4">
      <UAlert
        title="Error"
        color="error"
        variant="soft"
        icon="i-lucide-alert-triangle"
      >
        <template #description>
          {{ "{{" }} error {{ "}}" }}
        </template>
      </UAlert>
    </div>

    <div v-else-if="{{.StructName | toCamel}}" class="p-4">
      <UCard v-if="!isEditing" class="{{.StructName | toKebab}}-detail">
        <template #header>
          <div class="flex items-center justify-between">
            <h3 class="text-lg font-semibold">{{.StructName}} Details</h3>
            <div class="{{.StructName | toKebab}}-meta flex space-x-2">
              <UBadge color="neutral" variant="soft" class="text-xs">
                ID: {{ "{{" }} {{.StructName | toCamel}}.id {{ "}}" }}
              </UBadge>
              <UBadge color="primary" variant="soft" class="text-xs">
                Created: {{ "{{" }} formatDate({{.StructName | toCamel}}.createdAt) {{ "}}" }}
              </UBadge>
              <UBadge color="primary" variant="soft" class="text-xs">
                Updated: {{ "{{" }} formatDate({{.StructName | toCamel}}.updatedAt) {{ "}}" }}
              </UBadge>
            </div>
          </div>
        </template>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 py-4">
          {{range .Fields}}
          <UCard class="field-card">
            <div class="flex flex-col">
              <div class="text-sm font-medium text-gray-500">{{.JSONName | toPascal}}</div>
              <div class="mt-1 font-medium">{{ "{{" }} {{$.StructName | toCamel}}.{{.JSONName}} || '-' {{ "}}" }}</div>
            </div>
          </UCard>
          {{end}}
        </div>
      </UCard>

      <Edit{{.StructName}} 
        v-else 
        :{{.StructName | toCamel}}="{{.StructName | toCamel}}" 
        :loading="saving"
        @submit="handleUpdate"
      />
    </div>

    <!-- Delete Confirmation Dialog -->
    <UModal v-model="showDeleteConfirm">
      <UCard>
        <template #header>
          <div class="flex items-center justify-between">
            <h3 class="text-base font-semibold leading-6 text-gray-900 dark:text-white">
              Delete {{.StructName}}
            </h3>
            <UButton
              color="neutral"
              variant="ghost"
              icon="i-heroicons-x-mark-20-solid"
              class="-my-1"
              @click="showDeleteConfirm = false"
            />
          </div>
        </template>

        <div class="py-4">
          <p class="text-sm text-gray-500">
            Are you sure you want to delete this {{.StructName | toLower}}? This action cannot be undone.
          </p>
        </div>

        <template #footer>
          <div class="flex justify-end gap-x-4">
            <UButton
              label="Cancel"
              color="neutral"
              variant="ghost"
              @click="showDeleteConfirm = false"
            />
            <UButton
              label="Delete"
              color="error"
              :loading="deleting"
              @click="deleteItem"
            />
          </div>
        </template>
      </UCard>
    </UModal>
  </div>
</template>

<script setup lang="ts">
import { format } from 'date-fns'
import type { {{.StructName}} } from '@@/structures/{{.PluralName | toKebab}}/stores/{{.StructName | toCamel}}'
import { use{{.StructName}}Service } from '@@/structures/{{.PluralName | toKebab}}/services/{{.StructName | toCamel}}Service'
import { use{{.PluralName}}Store } from '@@/structures/{{.PluralName | toKebab}}/stores/{{.PluralName | toCamel}}Store'
import Edit{{.StructName}} from '@@/structures/{{.PluralName | toKebab}}/components/Edit{{.StructName}}Modal.vue'

const route = useRoute()
const id = computed(() => String(route.params.id))
const {{.StructName | toCamel}}Service = use{{.StructName}}Service()
const {{.PluralName | toCamel}}Store = use{{.PluralName}}Store()

const {{.StructName | toCamel}} = ref<{{.StructName}} | null>(null)
const loading = ref(true)
const error = ref('')
const isEditing = ref(false)
const saving = ref(false)
const showDeleteConfirm = ref(false)
const deleting = ref(false)

onMounted(async () => {
  try {
    const itemId = route.params.id
    if (!itemId) {
      error.value = 'No {{.StructName}} ID provided'
      loading.value = false
      return
    }

    const result = await {{.StructName | toCamel}}Service.fetchById(Number(itemId))
    {{.StructName | toCamel}}.value = result.item
    loading.value = false
  } catch (e: any) {
    error.value = `Error loading {{.StructName}}: ${e?.message || 'Unknown error'}`
    loading.value = false
  }
})

function formatDate(dateString: string) {
  try {
    return format(new Date(dateString), 'PPP')
  } catch (e) {
    return dateString
  }
}

async function handleUpdate(id: number, data: Partial<{{.StructName}}>) {
  if (!{{.StructName | toCamel}}.value) return
  
  saving.value = true
  try {
    await {{.StructName | toCamel}}Service.update(id, data)
    
    // Fetch the updated entity
    const result = await {{.StructName | toCamel}}Service.fetchById({{.StructName | toCamel}}.value.id)
    {{.StructName | toCamel}}.value = result.item
    isEditing.value = false
  } catch (e: any) {
    error.value = `Error updating {{.StructName}}: ${e?.message || 'Unknown error'}`
  } finally {
    saving.value = false
  }
}

async function saveChanges() {
  if (!{{.StructName | toCamel}}.value) return
  
  saving.value = true
  try {
    await {{.StructName | toCamel}}Service.update({{.StructName | toCamel}}.value.id, {{.StructName | toCamel}}.value)
    isEditing.value = false
    // Refresh data
    const result = await {{.StructName | toCamel}}Service.fetchById({{.StructName | toCamel}}.value.id)
    {{.StructName | toCamel}}.value = result.item
  } catch (e: any) {
    error.value = `Error updating {{.StructName}}: ${e?.message || 'Unknown error'}`
  } finally {
    saving.value = false
  }
}

async function deleteItem() {
  if (!{{.StructName | toCamel}}.value) return
  
  deleting.value = true;
  try {
    await {{.StructName | toCamel}}Service.delete({{.StructName | toCamel}}.value.id)
    // Navigate back to listing page
    navigateTo(`/structures/{{.PluralName | toKebab}}`)
  } catch (e: any) {
    error.value = `Error deleting {{.StructName}}: ${e?.message || 'Unknown error'}`
    showDeleteConfirm.value = false
  } finally {
    deleting.value = false;
  }
}
</script>

<style scoped>
.{{.StructName | toLower}}-detail-container {
  min-height: 100%;
  display: flex;
  flex-direction: column;
}

.{{.StructName | toLower}}-detail-header {
  border-bottom: 1px solid var(--color-gray-200);
}

@media (prefers-color-scheme: dark) {
  .{{.StructName | toLower}}-detail-header {
    border-bottom: 1px solid var(--color-gray-800);
  }
}
</style>
